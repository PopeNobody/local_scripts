#!/usr/bin/perl

my $debug=1;
use Data::Dumper;
use File::stat;
use Getopt::WonderBra;
use strict;
use warnings; 
use Fcntl ':mode';
use Cwd qw(getcwd realpath);

$|++;

my ($defcmd, $cmd) = qw(vim);
sub help {
  print "usage: $0 [-c cmd] script";
}
sub version {
  print "pvi version 0.5.0";
};
sub proc_argv(@);
sub get_path();
@ARGV = proc_argv(@ARGV);
die "usage: $0 [script]" unless @ARGV==1;
my $script=shift;
my @script;
for( get_path() ) {
  my $fname="$_/$script";
  $fname=realpath($fname);
  next unless defined(stat($fname));
  push(@script, $fname);
};

#my @script = map { "$_/$script" } get_path();
  # grep { my $stat=lstat($_); defined($stat) && -f ($stat) } map { "$_/$script" } get_path();
if( @script > 1 ) {
  my $i=0;
  for(@script) {
    printf("%8d) %s\n", ++$i, $_);
  };
  my $r=<STDIN>;
  @script = $script[$r-1];
};
exec($cmd, @script);
die "exec failed";

## subs
sub get_path() {
  my (@path,%seen);
  for( split(/:/,$ENV{PATH}) )
  {
    my $stat=stat($_);
    if(!defined($stat)) {
      warn("stat:$_:$!");
      next;
    };
    unless( -d $stat ) {
      warn("$_ is not a dir");
      next;
    };
    my $unid = sprintf("%08x:%08x",$stat->dev,$stat->ino);
    if( defined($seen{$unid}) ) {
      warn("$_ seen before");
      next;
    };
    $seen{$unid}=$_;
    push(@path,$_);
  };
  return @path;
};
sub proc_argv(@) {
  local @_=getopt("c:",@_);
  while( ($_=shift) ne '--' )
  {
    if( m{^-c$} ) {
      die ">1 command specified" if defined $cmd;
      $cmd=shift;
    } else {
      die "I don't grok '$_'";
    };
  };
  die "no command to search for!" unless @ARGV;
  $cmd=$defcmd unless defined $cmd;
  return @_;
};
