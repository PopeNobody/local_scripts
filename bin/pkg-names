#!/usr/bin/perl

use strict;
use warnings;
use autodie qw(:all);
BEGIN {
  $|++;
  use FindBin qw($Bin);
  use lib "$Bin/../lib/perl";
};
use Util;
use Data::Dumper;
use Getopt::WonderBra;

sub help {
  print "I can't help you.";
}
sub version {
  print "some other version";
};



$Data::Dumper::Deparse=1;
my $match;
sub handle_args(\@)
{
  local(*_)=shift;
  if(@_) {
    my @re = map { qr/$_/ } @ARGV;
    $match=sub($){ my $a=$_; for(@re) { return 1 if $a=~$_; } return 0;};
  };
};
sub void_line($) {
  local ($_)=shift;
  s{^\s*\S+\s+}{};
  if( @_=m{(\S*)(-(alpha|)[Bv0-9]\S+)} ) {
    return shift;
  } else {
    print "failed: $_\n";
  };
};
sub void_source() {
    return "xbps-query -s . -R|";
};
sub debian_source() {
    return "apt-cache pkgnames|";
};
sub debian_line($) {
  local ($_)=shift;
  return unless @_=split;
  return shift;
};
sub get_os_type() {
  local (@_);
  @_ = map { split } qx(os);
  return shift;
};
sub line($);
sub source();

my $os_type=get_os_type();
if( $os_type eq "void" ) {
  *line=\&void_line;
  *source=\&void_source;
} elsif ( $os_type eq "debian" ) {
  *line=\&debian_line;
  *source=\&debian_source;
} else {
    die "os_type neither debian nor void\n";
};
sub main()
{
  my %seen;
  @ARGV=source();
  while( <> )
  {
    if(defined($match)) {
      next unless $match->($_);
    };
    $seen{line($_)}++;
  };
  print "$_\n" for sort keys %seen;
};
@ARGV=handle_args(@ARGV);
main();
